# The Kafka broker location (defaults to localhost:9092)
#kafka.bootstrap.servers=localhost:9092
#quarkus.mongodb.connection-string=mongodb://localhost:27017
kafka.bootstrap.servers=180.0.252.182:9092
quarkus.mongodb.connection-string=mongodb://180.0.232.57:27017/transaction?authSource=admin&authMechanism=SCRAM-SHA-1
quarkus.kubernetes.env.secrets=mongodb
quarkus.kubernetes.env.mapping.database-name.from-secret=mongodb
quarkus.kubernetes.env.mapping.database-name.with-key=database-name
quarkus.kubernetes.env.mapping.database-user.from-secret=mongodb
quarkus.kubernetes.env.mapping.database-user.with-key=database-user
quarkus.kubernetes.env.mapping.database-password.from-secret=mongodb
quarkus.kubernetes.env.mapping.database-password.with-key=database-password


# Configuring the incoming channel (reading from Kafka)
mp.messaging.incoming.preview-authorization.connector=smallrye-kafka
mp.messaging.incoming.preview-authorization.topic=preview-authorization
mp.messaging.incoming.preview-authorization.value.deserializer=br.com.santander.example.saga.model.TransactionDeserializer

# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.confirmation-authorization.connector=smallrye-kafka
mp.messaging.outgoing.confirmation-authorization.topic=confirmation-authorization
mp.messaging.outgoing.confirmation-authorization.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the compensate channel (in) (reading from Kafka)
mp.messaging.incoming.compensation-authorization.connector=smallrye-kafka
mp.messaging.incoming.compensation-authorization.topic=compensation-authorization
mp.messaging.incoming.compensation-authorization.value.deserializer=br.com.santander.example.saga.model.TransactionDeserializer

# Configuring the compensate channel (out) (writing to Kafka)
mp.messaging.outgoing.confirmation-authorization-out.connector=smallrye-kafka
mp.messaging.outgoing.confirmation-authorization-out.topic=confirmation-authorization-out
mp.messaging.outgoing.confirmation-authorization-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

# Configuring the incoming channel (reading from Kafka)
mp.messaging.incoming.preview-authorization2.connector=smallrye-kafka
mp.messaging.incoming.preview-authorization2.topic=preview-authorization2
mp.messaging.incoming.preview-authorization2.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.preview-authorization-producer.connector=smallrye-kafka
mp.messaging.outgoing.preview-authorization-producer.topic=preview-authorization
mp.messaging.outgoing.preview-authorization-producer.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer



# Mysql
#quarkus.datasource.db-kind: mysql
#quarkus.datasource.jdbc.url: jdbc:mysql://my-release-mysql.default.svc.cluster.local:3306/quarkus?useTimezone=true&serverTimezone=UTC
#quarkus.datasource.username: user
#quarkus.datasource.password: password
#quarkus.hibernate-orm.log.sql: true
#quarkus.hibernate-orm.database.generation: drop-and-create
#quarkus.hibernate-orm.sql-load-script: import.sql

